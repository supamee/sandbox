// C include
#include <string.h>
#include <time.h>

// LoRa include
#include <SPI.h>
#include <RH_RF95.h>

// display include
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// Define OLED PIN
#define OLED_SDA 21
#define OLED_SCL 22
#define OLED_RST -1

#define RFM95_CS 18
#define RFM95_INT 26
#define RFM95_RST 23
#define RF95_FREQ 915.0

RH_RF95 rf95(RFM95_CS, RFM95_INT);

const char HEALTH_MSG_FREQ = 1;

const char START_BYTE = '$';
const char *serial_headers[5] = {"t", "r", "h", "i", "b"};
uint8_t HEADER_LENGTH = 1;

uint8_t ID = 1; // one byte id of lora gateway, must be > 0

enum MSG_TYPES
{
  TRANSMIT,  // messages to transmit/have been transmitted over lora network
  RECEIVE,   // messages that have been received from lora network
  HEALTH,    // health messages sent through serial
  CONFIG_ID, // messages to configure id
  BROADCAST, // broadcast message, used for routing purposes
  INVALID
};

Adafruit_SSD1306 display(128, 64, &Wire, OLED_RST);

void update_display(char message[])
{
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.println(message);
  display.display();
}

void setup_display()
{
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3c))
  {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ; // Don't proceed further, loop forever
  }
}

void setup_lora()
{
  pinMode(RFM95_RST, OUTPUT);
  digitalWrite(RFM95_RST, HIGH);

  // manual reset
  digitalWrite(RFM95_RST, LOW);
  delay(10);
  digitalWrite(RFM95_RST, HIGH);
  delay(10);

  while (!rf95.init())
  {
    Serial.println("LoRa radio init failed");
    Serial.println("Uncomment '#define SERIAL_DEBUG' in RH_RF95.cpp for detailed debug info");
    while (1)
      ;
  }
  Serial.println("LoRa radio init OK!");

  // Defaults after init are 434.0MHz, modulation GFSK_Rb250Fd250, +13dbM
  if (!rf95.setFrequency(RF95_FREQ))
  {
    Serial.println("setFrequency failed");
    while (1)
      ;
  }
  Serial.print("Set Freq to: ");
  Serial.println(RF95_FREQ);

  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on

  // The default transmitter power is 13dBm, using PA_BOOST.
  // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then
  // you can set transmitter powers from 5 to 23 dBm:
  rf95.setTxPower(23, false);
}

void setup()
{
  Serial.begin(115200);
  Serial1.begin(115200);
  delay(100);

  setup_lora();
}

uint8_t read_serial_message(uint8_t buf[], uint8_t maxLength)
{
  uint8_t len = 0;
  while (Serial.available() > 0 && len < RH_RF95_MAX_MESSAGE_LEN)
  {
    buf[len] = Serial.read();
    len++;
  }
  buf[len++] = 0; // null terminator
  return len;
}

MSG_TYPES check_for_header(char buf[])
{
  for (uint8_t i = 0; i < sizeof(serial_headers) / sizeof(serial_headers[0]); i++)
  {
    bool match = true;
    for (int j = 0; j < HEADER_LENGTH; j++)
    {
      if (serial_headers[i][j] != buf[j])
      {
        match = false;
        break;
      }
    }

    if (match)
    {
      return (MSG_TYPES)i;
    }
  }

  return INVALID;
}

// transmits message
void transmit_lora(uint8_t msg[], uint8_t msg_len)
{
  delay(10);
  rf95.send(msg, msg_len);
  delay(10);
  rf95.waitPacketSent();
}

void write_msg_with_header(char msg_buf[], char payload_buf[], MSG_TYPES msg_type)
{
  msg_buf[0] = '$';
  strcpy(msg_buf + 1, serial_headers[(u_int8_t)msg_type]);
  strcpy(msg_buf + HEADER_LENGTH + 1, payload_buf);
}

uint8_t *get_msg_body(uint8_t buf[])
{
  return buf + 1 + HEADER_LENGTH;
}

int received = 0;
time_t start_time = time(NULL);
// sends health message
// if (time(NULL) - start_time > HEALTH_MSG_FREQ)
// {
//   char health_msg[HEADER_LENGTH + 1];
//   write_msg_with_header(health_msg, "", HEALTH);
//   Serial.print(health_msg);
//   Serial.println(ID); // includes sentry id as a string

//   start_time = time(NULL);
// }

// checks if lora has received message
// tests whether a new message is available
void loop()
{
  // checks if lora has received message
  // tests whether a new message is available
  if (rf95.available())
  {
    uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];
    uint8_t len = sizeof(buf);

    if (rf95.recv(buf, &len))
    {
      digitalWrite(LED_BUILTIN, LOW);
      char write_buf[len];

      write_msg_with_header(write_buf, (char *)get_msg_body(buf), RECEIVE);
      Serial.println(write_buf);
      digitalWrite(LED_BUILTIN, HIGH);
    }
    else
    {
      Serial.println("Receive failed");
    }
  }

  // transmits all messages if available
  if (Serial.available() > 0 && (char)Serial.read() == START_BYTE)
  {
    uint8_t msg_buf[RH_RF95_MAX_MESSAGE_LEN];
    msg_buf[0] = (uint8_t)'$';
    uint8_t buf_len = read_serial_message(msg_buf + 1, RH_RF95_MAX_MESSAGE_LEN) + 1;

    MSG_TYPES message_type = check_for_header((char *)msg_buf + 1);

    if (message_type == TRANSMIT)
    {
      Serial.print("Transmitting: ");
      Serial.printf((char *)msg_buf);
      transmit_lora(msg_buf, buf_len);
    }
    else if ((MSG_TYPES)message_type == INVALID)
    {
      Serial.println("Invalid Message Header");
    }
  }
}